name: Deploy to NCP (Improved)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  APP_NAME: cherrypick
  JAR_FILE: CherryPick-0.0.1-SNAPSHOT.jar
  DOCKER_IMAGE: cherrypick-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cherrypick_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      id: setup-java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        NCP_DB_HOST=localhost
        NCP_DB_PORT=5432
        NCP_DB_NAME=cherrypick_test
        NCP_DB_USERNAME=postgres
        NCP_DB_PASSWORD=test_password
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=
        JWT_SECRET=test-jwt-secret-key-must-be-at-least-64-characters-long-for-security-purposes
        JWT_EXPIRATION=86400000
        SPRING_PROFILES_ACTIVE=test
        NCP_OBJECT_STORAGE_ENDPOINT=https://kr.object.ncloudstorage.com
        NCP_OBJECT_STORAGE_BUCKET=cherrypick-test
        NCP_ACCESS_KEY_ID=test
        NCP_SECRET_ACCESS_KEY=test
        NCP_REGION=kr-standard
        COMMISSION_RATE=0.03
        NEW_USER_FREE_DAYS=30
        PROMOTION_ENABLED=false
        PROMOTION_RATE=0.00
        PROMOTION_END_DATE=2025-12-31
        EOF

    - name: Run tests
      run: ./gradlew test --parallel --build-cache
      env:
        SPRING_PROFILES_ACTIVE: test
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/test-results/test/*.xml
        retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      id: setup-java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Build application
      run: |
        chmod +x gradlew
        ./gradlew clean bootJar --parallel --build-cache
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=4"

    - name: Verify build
      run: |
        if [ ! -f "build/libs/${{ env.JAR_FILE }}" ]; then
          echo "‚ùå JAR file not found: ${{ env.JAR_FILE }}"
          ls -la build/libs/
          exit 1
        fi
        echo "‚úÖ Build successful: $(ls -lh build/libs/${{ env.JAR_FILE }})"

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: build/libs/${{ env.JAR_FILE }}
        retention-days: 7

  deploy:
    name: Deploy to NCP
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: ./

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.NCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.NCP_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        APP_NAME="cherrypick"
        JAR_FILE="CherryPick-0.0.1-SNAPSHOT.jar"
        SERVICE_NAME="cherrypick-app"
        BACKUP_DIR="/opt/cherrypick/backups"
        
        echo "üöÄ Starting deployment..."
        
        # Create backup directory
        sudo mkdir -p $BACKUP_DIR
        
        # Create backup if current version exists
        if [ -f "/opt/cherrypick/$JAR_FILE" ]; then
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "üì¶ Creating backup..."
          sudo cp "/opt/cherrypick/$JAR_FILE" "$BACKUP_DIR/$JAR_FILE.backup.$TIMESTAMP"
          # Keep only last 5 backups
          sudo find $BACKUP_DIR -name "*.backup.*" -type f | sort -r | tail -n +6 | sudo xargs rm -f
        fi
        
        # Stop service
        echo "üõë Stopping service..."
        sudo systemctl stop $SERVICE_NAME || true
        
        # Deploy new version
        echo "üì¶ Deploying new version..."
        sudo cp $JAR_FILE /opt/cherrypick/
        sudo chown cherrypick:cherrypick /opt/cherrypick/$JAR_FILE
        sudo chmod 755 /opt/cherrypick/$JAR_FILE
        
        # Start service
        echo "üöÄ Starting service..."
        sudo systemctl start $SERVICE_NAME
        sudo systemctl enable $SERVICE_NAME
        
        # Health check with timeout
        echo "‚è≥ Health check..."
        for i in {1..30}; do
          if curl -f --connect-timeout 3 --max-time 10 http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "‚úÖ Deployment successful!"
            exit 0
          fi
          echo "Waiting... ($i/30)"
          sleep 10
        done
        
        # Rollback if health check fails
        echo "‚ùå Health check failed, rolling back..."
        sudo systemctl stop $SERVICE_NAME
        LATEST_BACKUP=$(ls -t $BACKUP_DIR/*.backup.* 2>/dev/null | head -1)
        if [ -n "$LATEST_BACKUP" ]; then
          sudo cp "$LATEST_BACKUP" "/opt/cherrypick/$JAR_FILE"
          sudo systemctl start $SERVICE_NAME
          sleep 15
          if curl -f --connect-timeout 3 http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "‚úÖ Rollback successful"
            exit 2
          fi
        fi
        echo "‚ùå Deployment and rollback failed"
        exit 1
        EOF
        chmod +x deploy.sh

    - name: Copy files to server
      run: |
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ env.JAR_FILE }} deploy.sh \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }}:/tmp/

    - name: Create environment file on server
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} << 'EOF'
        sudo mkdir -p /opt/cherrypick
        sudo tee /opt/cherrypick/.env.prod > /dev/null << 'ENVEOF'
        # Database
        DB_HOST=${{ secrets.NCP_DB_HOST }}
        DB_PORT=${{ secrets.NCP_DB_PORT }}
        DB_NAME=${{ secrets.NCP_DB_NAME }}
        DB_USERNAME=${{ secrets.NCP_DB_USERNAME }}
        DB_PASSWORD=${{ secrets.NCP_DB_PASSWORD }}

        # Redis
        REDIS_HOST=${{ secrets.NCP_REDIS_HOST }}
        REDIS_PORT=${{ secrets.NCP_REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.NCP_REDIS_PASSWORD }}

        # JWT
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}

        # NCP Storage
        AWS_REGION=${{ secrets.NCP_REGION }}
        AWS_ACCESS_KEY_ID=${{ secrets.NCP_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.NCP_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET=${{ secrets.NCP_OBJECT_STORAGE_BUCKET }}

        # App Config
        SPRING_PROFILES_ACTIVE=prod
        SERVER_PORT=8080
        LOGGING_LEVEL_ROOT=INFO

        # Business Config
        COMMISSION_RATE=${{ secrets.COMMISSION_RATE }}
        NEW_USER_FREE_DAYS=${{ secrets.NEW_USER_FREE_DAYS }}
        PROMOTION_ENABLED=${{ secrets.PROMOTION_ENABLED }}
        PROMOTION_RATE=${{ secrets.PROMOTION_RATE }}
        PROMOTION_END_DATE=${{ secrets.PROMOTION_END_DATE }}
        ENVEOF
        sudo chown cherrypick:cherrypick /opt/cherrypick/.env.prod
        sudo chmod 600 /opt/cherrypick/.env.prod
        EOF

    - name: Create systemd service
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} << 'EOF'
        sudo tee /etc/systemd/system/cherrypick-app.service > /dev/null << 'SERVICEEOF'
        [Unit]
        Description=CherryPick Auction Service
        After=network.target

        [Service]
        Type=simple
        User=cherrypick
        Group=cherrypick
        WorkingDirectory=/opt/cherrypick
        ExecStart=/usr/bin/java -jar -Dspring.profiles.active=prod CherryPick-0.0.1-SNAPSHOT.jar
        SuccessExitStatus=143
        TimeoutStopSec=10
        Restart=on-failure
        RestartSec=5

        Environment="SPRING_PROFILES_ACTIVE=prod"
        EnvironmentFile=/opt/cherrypick/.env.prod

        # Security
        NoNewPrivileges=true
        ProtectSystem=strict
        ProtectHome=true
        ReadWritePaths=/opt/cherrypick

        # Logging
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=cherrypick-app

        [Install]
        WantedBy=multi-user.target
        SERVICEEOF

        sudo systemctl daemon-reload
        EOF

    - name: Deploy application
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} << 'EOF'
        cd /tmp
        ./deploy.sh
        EOF

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        for i in {1..10}; do
          if curl -f -s --connect-timeout 5 --max-time 10 \
            http://${{ secrets.NCP_SERVER_HOST }}:8080/actuator/health | grep -q "UP"; then
            echo "‚úÖ Deployment verified!"
            curl -s http://${{ secrets.NCP_SERVER_HOST }}:8080/actuator/health | jq . || echo "Health check passed"
            exit 0
          fi
          echo "Waiting for verification... ($i/10)"
          sleep 15
        done
        echo "‚ùå Deployment verification failed"
        exit 1

    - name: Cleanup
      if: always()
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} \
          "rm -f /tmp/${{ env.JAR_FILE }} /tmp/deploy.sh"

  rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.NCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.NCP_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Rollback to previous version
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} << 'EOF'
        cd /opt/cherrypick
        
        # Find latest backup
        BACKUP_FILE=$(ls -t backups/*.backup.* 2>/dev/null | head -1)
        if [ -z "$BACKUP_FILE" ]; then
          echo "‚ùå No backup found!"
          exit 1
        fi
        
        echo "üîÑ Rolling back to: $BACKUP_FILE"
        
        # Stop service
        sudo systemctl stop cherrypick-app
        
        # Restore backup
        sudo cp "$BACKUP_FILE" "CherryPick-0.0.1-SNAPSHOT.jar"
        sudo chown cherrypick:cherrypick "CherryPick-0.0.1-SNAPSHOT.jar"
        
        # Start service
        sudo systemctl start cherrypick-app
        
        # Verify rollback
        sleep 30
        if curl -f --connect-timeout 5 http://localhost:8080/actuator/health >/dev/null 2>&1; then
          echo "‚úÖ Rollback successful!"
        else
          echo "‚ùå Rollback failed!"
          exit 1
        fi
        EOF

    - name: Verify rollback
      run: |
        echo "üîç Verifying rollback..."
        for i in {1..10}; do
          if curl -f -s --connect-timeout 5 --max-time 10 \
            http://${{ secrets.NCP_SERVER_HOST }}:8080/actuator/health | grep -q "UP"; then
            echo "‚úÖ Rollback verified!"
            exit 0
          fi
          echo "Waiting... ($i/10)"
          sleep 10
        done
        echo "‚ùå Rollback verification failed"
        exit 1
