name: CherryPick NCP CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cherrypick
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: "코드 체크아웃 : GitHub 저장소에서 소스코드 다운로드"
        uses: actions/checkout@v4

      - name: "JDK 17 설정 : Java 17 개발환경 설치 및 설정"
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          check-latest: true

      - name: "Gradle 패키지 캐시 : 의존성 라이브러리 캐싱으로 빌드 속도 향상"
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: "gradlew 실행 권한 부여 : Gradle Wrapper 스크립트 실행 권한 설정"
        run: chmod +x gradlew

      - name: "Gradle Wrapper 검증 : 무결성 확인"
        uses: gradle/wrapper-validation-action@v1

      - name: "Java 환경 확인"
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Java version:"
          java -version
          echo "Java path:"
          which java

      - name: "테스트 실행 : 단위 테스트 및 통합 테스트 실행"
        run: ./gradlew test --no-daemon --stacktrace -Dorg.gradle.java.home="$JAVA_HOME"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: cherrypick_test
          DB_USERNAME: postgres
          DB_PASSWORD: password123
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-must-be-at-least-64-characters-long-for-testing
          SPRING_PROFILES_ACTIVE: test
          # NCP 설정 (GitHub Secrets 사용)
          NCP_OBJECT_STORAGE_ENDPOINT: ${{ secrets.NCP_OBJECT_STORAGE_ENDPOINT }}
          NCP_OBJECT_STORAGE_BUCKET: ${{ secrets.NCP_OBJECT_STORAGE_BUCKET }}
          NCP_ACCESS_KEY_ID: ${{ secrets.NCP_ACCESS_KEY_ID }}
          NCP_SECRET_ACCESS_KEY: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
          NCP_REGION: ${{ secrets.NCP_REGION }}

      - name: "테스트 리포트 생성 : 테스트 결과를 GitHub PR에 표시"
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gradle 테스트
          path: build/test-results/test/*.xml
          reporter: java-junit
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: "코드 체크아웃"
        uses: actions/checkout@v4

      - name: "현재 IP 확인 및 NCP ACG 업데이트"
        run: |
          # 현재 GitHub Actions runner IP 확인
          export RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "GitHub Actions Runner IP: $RUNNER_IP"
         
          # NCP CLI 설치 (최신 버전)
          wget -O ncloud-cli.zip https://www.ncloud.com/api/support/download/files/cli/CLI_1.1.25_20250717.zip
          unzip -o -q ncloud-cli.zip
          
          # JRE 경로 문제 해결: 심볼릭 링크 생성 (jre8 -> jre)
          cd CLI_1.1.25_20250717/cli_linux
          if [ -d "jre" ] && [ ! -d "jre8" ]; then
            ln -sf jre jre8
            echo "✓ JRE 경로 문제 해결: jre8 -> jre 심볼릭 링크 생성"
          fi
          cd ../..
          
          # cli_linux 디렉토리에서 ncloud 실행파일 경로 찾기
          NCLOUD_PATH=$(find . -name "ncloud" -type f | head -1)
          
          if [ -z "$NCLOUD_PATH" ]; then
            echo "ncloud executable not found in extracted files"
            exit 1
          fi
          
          # 실행 권한 부여
          chmod +x "$NCLOUD_PATH"
          echo "NCP CLI path: $NCLOUD_PATH"
          
          # JRE 환경 검증 (디버깅)
          NCLOUD_DIR=$(dirname "$NCLOUD_PATH")
          echo "=== JRE 환경 검증 ==="
          echo "Working directory: $(pwd)"
          echo "NCLOUD_DIR: $NCLOUD_DIR"
          ls -la "$NCLOUD_DIR"/jre*/bin/java* 2>/dev/null || echo "Java 실행파일 확인 필요"
          
          # NCP CLI 설정 및 ACG(Access Control Group) 업데이트 (디렉토리 이동 후 실행)
          echo "=== NCP CLI 설정 시작 ==="
          NCLOUD_DIR=$(dirname "$NCLOUD_PATH")
          cd "$NCLOUD_DIR"
          echo "Working directory changed to: $(pwd)"
          
          # NCP CLI Configuration 파일 직접 생성 (Interactive 모드 회피)
          mkdir -p ~/.ncloud
          cat > ~/.ncloud/configure << EOF
[DEFAULT]
ncloud_access_key_id = ${{ secrets.NCP_ACCESS_KEY_ID }}
ncloud_secret_access_key = ${{ secrets.NCP_SECRET_ACCESS_KEY }}
ncloud_api_url = https://ncloud.apigw.ntruss.com
EOF
          
          echo "✓ NCP CLI Configuration 파일 생성 완료"
          echo "Configuration file contents:"
          cat ~/.ncloud/configure | sed 's/ncloud_secret_access_key = .*/ncloud_secret_access_key = ***masked***/'
          
          # 현재 IP를 ACG에 추가 (SSH 접근 허용) - 재시도 로직 포함
          echo "=== ACG 인바운드 규칙 추가 시작 ==="
          for attempt in 1 2 3; do
            echo "ACG 규칙 추가 시도 $attempt/3..."
            if ./ncloud server addAccessControlGroupInboundRule \
              --accessControlGroupConfigurationNoList ${{ secrets.NCP_ACG_NO }} \
              --accessControlGroupRuleList 'protocolTypeCode=TCP,ipBlock='${RUNNER_IP}'/32,portRange=22'; then
              echo "✓ ACG 규칙 추가 성공"
              break
            else
              echo "⚠ ACG 규칙 추가 실패 (시도 $attempt/3)"
              if [ $attempt -eq 3 ]; then
                echo "❌ ACG 규칙 추가 최종 실패 - IP가 이미 존재하거나 권한 문제"
              else
                sleep 5
              fi
            fi
          done
          
          cd - > /dev/null  # 원래 디렉토리로 복귀
           
      - name: "NCP Server 배포 : SSH로 NCP 서버에 접속하여 애플리케이션 재시작"
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          script: |
            # 프로젝트 디렉토리로 이동 (NCP 서버 경로)
            cd /home/ncp/CherryPick
           
            # 최신 코드 받기
            git pull origin main
           
            # 기존 Java 프로세스 안전하게 종료
            echo "=== 기존 프로세스 종료 ==="
            JAVA_PID=$(ps aux | grep "bootRun" | grep -v grep | awk '{print $2}')
            if [ ! -z "$JAVA_PID" ]; then
                echo "Java 프로세스 찾음: $JAVA_PID"
                kill -TERM $JAVA_PID
                echo "30초 대기 중..."
                sleep 30
               
                # 여전히 살아있으면 강제 종료
                if ps -p $JAVA_PID > /dev/null 2>&1; then
                    echo "강제 종료 실행"
                    kill -9 $JAVA_PID
                fi
            else
                echo "실행 중인 Java 프로세스 없음"
            fi
           
            # 이전 로그 백업
            if [ -f app.log ]; then
                mv app.log app.log.bak
            fi
           
            # 환경변수 로드
            source .env
           
            # 새 애플리케이션 시작
            echo "=== 새 애플리케이션 시작 ==="
            nohup ./gradlew bootRun > app.log 2>&1 &
            NEW_PID=$!
            echo "새 프로세스 PID: $NEW_PID"
           
            # 시작 확인 (최대 60초, 포트 열리면 즉시 완료)
            echo "=== 애플리케이션 시작 확인 (최대 60초) ==="
            for i in {1..12}; do
                sleep 5
                echo "확인 중... ${i}/12 ($(($i * 5))초)"
               
                # 포트 8080 확인
                if netstat -tlnp | grep :8080 > /dev/null; then
                    echo "✓ 애플리케이션 시작 완료! ($(($i * 5))초)"
                    break
                fi
               
                # 마지막 시도
                if [ $i -eq 12 ]; then
                    echo "⚠ 60초 대기 완료 - 포트 상태 확인 필요"
                fi
            done
           
            # 최종 상태 확인
            echo "=== 프로세스 상태 ==="
            ps aux | grep java | grep -v grep || echo "Java 프로세스 없음"
           
            echo "=== 포트 상태 ==="
            netstat -tlnp | grep :8080 || echo "8080 포트 사용 안함"
           
            echo "=== 최근 로그 (50줄) ==="
            tail -50 app.log
           
            echo "=== 오류 검색 ==="
            grep -i "error\|exception\|failed" app.log | tail -15 || echo "특별한 오류 없음"

      - name: "헬스 체크 : 배포된 애플리케이션 정상 동작 확인"
        run: |
          sleep 20
          curl -f http://${{ secrets.NCP_SERVER_HOST }}:8080/actuator/health || echo "헬스체크 실패 - 수동 확인 필요"
         
      - name: "ACG에서 GitHub Actions IP 제거"
        if: always()  # 성공/실패 여부에 관계없이 실행
        run: |
          export RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Removing GitHub Actions IP: $RUNNER_IP from ACG"
         
          # NCP CLI 설치 (제거 작업용)
          wget -O ncloud-cli.zip https://www.ncloud.com/api/support/download/files/cli/CLI_1.1.25_20250717.zip
          unzip -o -q ncloud-cli.zip
          
          # JRE 경로 문제 해결: 심볼릭 링크 생성 (jre8 -> jre)
          cd CLI_1.1.25_20250717/cli_linux
          if [ -d "jre" ] && [ ! -d "jre8" ]; then
            ln -sf jre jre8
            echo "✓ JRE 경로 문제 해결: jre8 -> jre 심볼릭 링크 생성"
          fi
          cd ../..
          
          # cli_linux 디렉토리에서 ncloud 실행파일 경로 찾기
          NCLOUD_PATH=$(find . -name "ncloud" -type f | head -1)
          
          if [ -z "$NCLOUD_PATH" ]; then
            echo "ncloud executable not found, skipping ACG cleanup"
            exit 0
          fi
          
          # 실행 권한 부여
          chmod +x "$NCLOUD_PATH"
          echo "NCP CLI path: $NCLOUD_PATH"
          
          # NCP CLI 설정 (디렉토리 이동 후 실행)
          echo "=== NCP CLI 설정 (정리 작업용) ==="
          NCLOUD_DIR=$(dirname "$NCLOUD_PATH")
          cd "$NCLOUD_DIR"
          
          # NCP CLI Configuration 파일 직접 생성 (Interactive 모드 회피)
          mkdir -p ~/.ncloud
          cat > ~/.ncloud/configure << EOF
[DEFAULT]
ncloud_access_key_id = ${{ secrets.NCP_ACCESS_KEY_ID }}
ncloud_secret_access_key = ${{ secrets.NCP_SECRET_ACCESS_KEY }}
ncloud_api_url = https://ncloud.apigw.ntruss.com
EOF
          
          echo "✓ NCP CLI Configuration 파일 생성 완료"
          echo "Configuration file contents:"
          cat ~/.ncloud/configure | sed 's/ncloud_secret_access_key = .*/ncloud_secret_access_key = ***masked***/'
          
          # GitHub Actions IP를 ACG에서 제거 - 재시도 로직 포함
          echo "=== ACG에서 IP 제거 시작 ==="
          for attempt in 1 2 3; do
            echo "ACG 규칙 제거 시도 $attempt/3..."
            if ./ncloud server deleteAccessControlGroupInboundRule \
              --accessControlGroupConfigurationNoList ${{ secrets.NCP_ACG_NO }} \
              --accessControlGroupRuleList 'protocolTypeCode=TCP,ipBlock='${RUNNER_IP}'/32,portRange=22' 2>/dev/null; then
              echo "✓ ACG 규칙 제거 성공"
              break
            else
              echo "⚠ ACG 규칙 제거 실패 (시도 $attempt/3)"
              if [ $attempt -eq 3 ]; then
                echo "❌ ACG 규칙 제거 최종 실패 - 규칙이 존재하지 않거나 권한 문제"
              else
                sleep 3
              fi
            fi
          done
          
          cd - > /dev/null  # 원래 디렉토리로 복귀

      - name: "슬랙 알림 : 배포 결과를 슬랙 채널로 알림"
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            EMOJI="✅"
            COLOR="good"
          else
            EMOJI="❌"
            COLOR="danger"
          fi
          
          curl -X POST -H "Content-type: application/json" \
          --connect-timeout 30 --max-time 60 \
          --data "{
            \"text\": \"$EMOJI CherryPick NCP 배포 $STATUS\",
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"fields\": [
                {\"title\": \"브랜치\", \"value\": \"${{ github.ref }}\", \"short\": true},
                {\"title\": \"커밋\", \"value\": \"${{ github.sha }}\", \"short\": true},
                {\"title\": \"작성자\", \"value\": \"${{ github.actor }}\", \"short\": true}
              ]
            }]
          }" \
          "${{ secrets.SLACK_WEBHOOK }}" || echo "슬랙 알림 전송 실패 - 수동 확인 필요"
