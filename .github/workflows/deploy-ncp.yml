name: Deploy to NCP (Naver Cloud Platform)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # 애플리케이션 설정
  APP_NAME: cherrypick
  JAR_FILE: cherrypick-0.0.1-SNAPSHOT.jar
  DOCKER_IMAGE: cherrypick-app
  
  # NCP 서버 설정 
  NCP_SERVER_HOST: ${{ secrets.NCP_SERVER_HOST }}
  NCP_SERVER_USER: ${{ secrets.NCP_SERVER_USER }}
  NCP_SERVER_PORT: ${{ secrets.NCP_SERVER_PORT || '22' }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cherrypick_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        NCP_DB_HOST=localhost
        NCP_DB_PORT=5432
        NCP_DB_NAME=cherrypick_test
        NCP_DB_USERNAME=postgres
        NCP_DB_PASSWORD=test_password
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=
        JWT_SECRET=test-jwt-secret-key-must-be-at-least-64-characters-long-for-security-purposes
        JWT_EXPIRATION=86400000
        SPRING_PROFILES_ACTIVE=test
        NCP_OBJECT_STORAGE_ENDPOINT=https://kr.object.ncloudstorage.com
        NCP_OBJECT_STORAGE_BUCKET=cherrypick-test
        NCP_ACCESS_KEY_ID=test
        NCP_SECRET_ACCESS_KEY=test
        NCP_REGION=kr-standard
        COMMISSION_RATE=0.03
        NEW_USER_FREE_DAYS=30
        PROMOTION_ENABLED=false
        PROMOTION_RATE=0.00
        PROMOTION_END_DATE=2025-12-31
        EOF

    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Gradle Test Results
        path: build/test-results/test/*.xml
        reporter: java-junit

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build application
      run: ./gradlew bootJar

    - name: Create deployment artifact
      run: |
        mkdir -p deploy
        cp build/libs/${{ env.JAR_FILE }} deploy/
        cp docker-compose.prod.yml deploy/ || echo "docker-compose.prod.yml not found, skipping"
        cp -r scripts deploy/ || echo "scripts directory not found, skipping"
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        APP_NAME="cherrypick"
        JAR_FILE="cherrypick-0.0.1-SNAPSHOT.jar"
        SERVICE_NAME="cherrypick-app"
        
        echo "🚀 Starting deployment of $APP_NAME..."
        
        # Stop existing service
        sudo systemctl stop $SERVICE_NAME || echo "Service was not running"
        
        # Backup current version
        if [ -f "/opt/$APP_NAME/$JAR_FILE" ]; then
            sudo mv "/opt/$APP_NAME/$JAR_FILE" "/opt/$APP_NAME/$JAR_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Deploy new version
        sudo mkdir -p /opt/$APP_NAME
        sudo cp $JAR_FILE /opt/$APP_NAME/
        sudo chown cherrypick:cherrypick /opt/$APP_NAME/$JAR_FILE
        sudo chmod 755 /opt/$APP_NAME/$JAR_FILE
        
        # Start service
        sudo systemctl start $SERVICE_NAME
        sudo systemctl enable $SERVICE_NAME
        
        # Health check
        echo "⏳ Waiting for application to start..."
        for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "✅ Application is healthy!"
                break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
        done
        
        if ! curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "❌ Health check failed!"
            exit 1
        fi
        
        echo "🎉 Deployment completed successfully!"
        EOF
        
        chmod +x deploy/deploy.sh

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy/
        retention-days: 30

  deploy:
    name: Deploy to NCP Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: http://${{ secrets.NCP_SERVER_HOST }}:8080

    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deploy/

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.NCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Create production environment file on server
      run: |
        ssh -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_USER }}@${{ env.NCP_SERVER_HOST }} << 'EOF'
        sudo mkdir -p /opt/cherrypick
        sudo tee /opt/cherrypick/.env.prod > /dev/null << 'ENVEOF'
        # NCP 운영 환경 설정
        NCP_DB_HOST=${{ secrets.NCP_DB_HOST }}
        NCP_DB_PORT=${{ secrets.NCP_DB_PORT }}
        NCP_DB_NAME=${{ secrets.NCP_DB_NAME }}
        NCP_DB_USERNAME=${{ secrets.NCP_DB_USERNAME }}
        NCP_DB_PASSWORD=${{ secrets.NCP_DB_PASSWORD }}
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
        SPRING_PROFILES_ACTIVE=prod
        SERVER_PORT=8080
        LOGGING_LEVEL_ROOT=INFO
        LOGGING_LEVEL_CHERRYPICK=INFO
        LOGGING_LEVEL_SQL=WARN
        NCP_OBJECT_STORAGE_ENDPOINT=${{ secrets.NCP_OBJECT_STORAGE_ENDPOINT }}
        NCP_OBJECT_STORAGE_BUCKET=${{ secrets.NCP_OBJECT_STORAGE_BUCKET }}
        NCP_ACCESS_KEY_ID=${{ secrets.NCP_ACCESS_KEY_ID }}
        NCP_SECRET_ACCESS_KEY=${{ secrets.NCP_SECRET_ACCESS_KEY }}
        NCP_REGION=${{ secrets.NCP_REGION }}
        COMMISSION_RATE=${{ secrets.COMMISSION_RATE }}
        NEW_USER_FREE_DAYS=${{ secrets.NEW_USER_FREE_DAYS }}
        PROMOTION_ENABLED=${{ secrets.PROMOTION_ENABLED }}
        PROMOTION_RATE=${{ secrets.PROMOTION_RATE }}
        PROMOTION_END_DATE=${{ secrets.PROMOTION_END_DATE }}
        ENVEOF
        sudo chown cherrypick:cherrypick /opt/cherrypick/.env.prod
        sudo chmod 600 /opt/cherrypick/.env.prod
        EOF

    - name: Copy deployment files to server
      run: |
        scp -P ${{ env.NCP_SERVER_PORT }} -r deploy/* ${{ env.NCP_SERVER_USER }}@${{ env.NCP_SERVER_HOST }}:/tmp/cherrypick-deploy/

    - name: Create systemd service file
      run: |
        ssh -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_USER }}@${{ env.NCP_SERVER_HOST }} << 'EOF'
        sudo tee /etc/systemd/system/cherrypick-app.service > /dev/null << 'SERVICEEOF'
        [Unit]
        Description=CherryPick Auction Service
        After=network.target
        
        [Service]
        Type=simple
        User=cherrypick
        Group=cherrypick
        WorkingDirectory=/opt/cherrypick
        ExecStart=/usr/bin/java -jar -Dspring.profiles.active=prod cherrypick-0.0.1-SNAPSHOT.jar
        SuccessExitStatus=143
        TimeoutStopSec=10
        Restart=on-failure
        RestartSec=5
        
        # Environment
        Environment="SPRING_PROFILES_ACTIVE=prod"
        EnvironmentFile=/opt/cherrypick/.env.prod
        
        # Security
        NoNewPrivileges=true
        PrivateTmp=true
        ProtectSystem=strict
        ProtectHome=true
        ReadWritePaths=/opt/cherrypick
        
        # Logging
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=cherrypick-app
        
        [Install]
        WantedBy=multi-user.target
        SERVICEEOF
        
        sudo systemctl daemon-reload
        EOF

    - name: Deploy application
      run: |
        ssh -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_USER }}@${{ env.NCP_SERVER_HOST }} << 'EOF'
        cd /tmp/cherrypick-deploy
        chmod +x deploy.sh
        ./deploy.sh
        EOF

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        for i in {1..12}; do
          if curl -f -s http://${{ env.NCP_SERVER_HOST }}:8080/actuator/health | grep -q "UP"; then
            echo "✅ Deployment verification successful!"
            curl -s http://${{ env.NCP_SERVER_HOST }}:8080/actuator/info || echo "Info endpoint not available"
            exit 0
          fi
          echo "Waiting for service... ($i/12)"
          sleep 10
        done
        echo "❌ Deployment verification failed!"
        exit 1

    - name: Cleanup deployment files
      if: always()
      run: |
        ssh -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_USER }}@${{ env.NCP_SERVER_HOST }} << 'EOF'
        rm -rf /tmp/cherrypick-deploy
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Successfully deployed CherryPick to NCP!"
          echo "📱 Application URL: http://${{ env.NCP_SERVER_HOST }}:8080"
          echo "📊 Health Check: http://${{ env.NCP_SERVER_HOST }}:8080/actuator/health"
        else
          echo "❌ Deployment failed. Please check the logs."
        fi

  rollback:
    name: Rollback (Manual Trigger)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: 
      name: production

    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.NCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Rollback to previous version
      run: |
        ssh -p ${{ env.NCP_SERVER_PORT }} ${{ env.NCP_SERVER_USER }}@${{ env.NCP_SERVER_HOST }} << 'EOF'
        cd /opt/cherrypick
        
        # Find latest backup
        BACKUP_FILE=$(ls -t *.backup.* 2>/dev/null | head -1)
        
        if [ -z "$BACKUP_FILE" ]; then
            echo "❌ No backup file found for rollback!"
            exit 1
        fi
        
        echo "🔄 Rolling back to: $BACKUP_FILE"
        
        # Stop service
        sudo systemctl stop cherrypick-app
        
        # Restore backup
        sudo mv "$BACKUP_FILE" "cherrypick-0.0.1-SNAPSHOT.jar"
        sudo chown cherrypick:cherrypick "cherrypick-0.0.1-SNAPSHOT.jar"
        
        # Start service
        sudo systemctl start cherrypick-app
        
        echo "✅ Rollback completed!"
        EOF

    - name: Verify rollback
      run: |
        sleep 30
        if curl -f http://${{ env.NCP_SERVER_HOST }}:8080/actuator/health; then
          echo "✅ Rollback verification successful!"
        else
          echo "❌ Rollback verification failed!"
          exit 1
        fi