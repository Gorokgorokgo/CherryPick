name: Deploy to NCP (Self-hosted)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: cherrypick
  JAR_FILE: CherryPick-0.0.1-SNAPSHOT.jar

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest  # 테스트는 GitHub-hosted runner 사용
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cherrypick_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    - name: Test
      run: |
        chmod +x gradlew
        ./gradlew test --parallel
      env:
        SPRING_PROFILES_ACTIVE: test

  build-and-deploy:
    name: Build and Deploy
    runs-on: self-hosted  # NCP 서버에서 직접 실행
    needs: test
    environment: production

    steps:
    - name: Cleanup workspace
      run: |
        # 이전 빌드 결과 정리
        rm -rf $GITHUB_WORKSPACE/* || true
        rm -rf $GITHUB_WORKSPACE/.[!.]* || true

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build application
      run: |
        chmod +x gradlew
        ./gradlew clean bootJar --parallel --no-daemon
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

    - name: Verify build
      run: |
        if [ ! -f "build/libs/${{ env.JAR_FILE }}" ]; then
          echo "❌ Build failed"
          exit 1
        fi
        echo "✅ Build success: $(ls -lh build/libs/${{ env.JAR_FILE }})"

    - name: Deploy application
      run: |
        echo "🚀 Starting deployment..."
        
        # 환경 파일 생성 (self-hosted runner에서 직접)
        sudo mkdir -p /opt/cherrypick
        sudo tee /opt/cherrypick/.env.prod > /dev/null << 'EOF'
        # Database
        DB_HOST=${{ secrets.NCP_DB_HOST }}
        DB_PORT=${{ secrets.NCP_DB_PORT }}
        DB_NAME=${{ secrets.NCP_DB_NAME }}
        DB_USERNAME=${{ secrets.NCP_DB_USERNAME }}
        DB_PASSWORD=${{ secrets.NCP_DB_PASSWORD }}

        # Redis
        REDIS_HOST=${{ secrets.NCP_REDIS_HOST }}
        REDIS_PORT=${{ secrets.NCP_REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.NCP_REDIS_PASSWORD }}

        # JWT
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}

        # NCP Object Storage
        AWS_REGION=${{ secrets.NCP_REGION }}
        AWS_ACCESS_KEY_ID=${{ secrets.NCP_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.NCP_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET=${{ secrets.NCP_OBJECT_STORAGE_BUCKET }}

        # Application
        SPRING_PROFILES_ACTIVE=prod
        SERVER_PORT=8080

        # Business
        COMMISSION_RATE=${{ secrets.COMMISSION_RATE }}
        NEW_USER_FREE_DAYS=${{ secrets.NEW_USER_FREE_DAYS }}
        PROMOTION_ENABLED=${{ secrets.PROMOTION_ENABLED }}
        PROMOTION_RATE=${{ secrets.PROMOTION_RATE }}
        PROMOTION_END_DATE=${{ secrets.PROMOTION_END_DATE }}
        EOF
        
        sudo chown cherrypick:cherrypick /opt/cherrypick/.env.prod
        sudo chmod 600 /opt/cherrypick/.env.prod

        # 백업 생성
        if [ -f "/opt/cherrypick/${{ env.JAR_FILE }}" ]; then
          echo "📦 Creating backup..."
          sudo cp "/opt/cherrypick/${{ env.JAR_FILE }}" \
            "/opt/cherrypick/${{ env.JAR_FILE }}.backup.$(date +%Y%m%d_%H%M%S)"
          # 오래된 백업 정리 (최근 5개만 보관)
          sudo find /opt/cherrypick -name "*.backup.*" -type f | sort -r | tail -n +6 | sudo xargs rm -f
        fi

        # 서비스 중지
        echo "🛑 Stopping service..."
        sudo systemctl stop cherrypick-app || echo "Service was not running"

        # 새 버전 배포
        echo "📦 Deploying new version..."
        sudo cp "build/libs/${{ env.JAR_FILE }}" "/opt/cherrypick/"
        sudo chown cherrypick:cherrypick "/opt/cherrypick/${{ env.JAR_FILE }}"
        sudo chmod 755 "/opt/cherrypick/${{ env.JAR_FILE }}"

        # systemd 서비스 파일 생성/업데이트
        sudo tee /etc/systemd/system/cherrypick-app.service > /dev/null << 'SERVICEEOF'
        [Unit]
        Description=CherryPick Auction Service
        After=network.target

        [Service]
        Type=simple
        User=cherrypick
        Group=cherrypick
        WorkingDirectory=/opt/cherrypick
        ExecStart=/usr/bin/java -jar -Dspring.profiles.active=prod CherryPick-0.0.1-SNAPSHOT.jar
        SuccessExitStatus=143
        TimeoutStopSec=10
        Restart=on-failure
        RestartSec=5

        # Environment
        Environment="SPRING_PROFILES_ACTIVE=prod"
        EnvironmentFile=/opt/cherrypick/.env.prod

        # Security
        NoNewPrivileges=true
        ProtectSystem=strict
        ProtectHome=true
        ReadWritePaths=/opt/cherrypick

        # Logging
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=cherrypick-app

        [Install]
        WantedBy=multi-user.target
        SERVICEEOF

        # systemd 설정 새로고침 및 서비스 시작
        sudo systemctl daemon-reload
        sudo systemctl enable cherrypick-app
        sudo systemctl start cherrypick-app

        echo "⏳ Health check..."
        # 헬스체크 (30회 시도, 총 5분)
        for i in {1..30}; do
          if curl -f --connect-timeout 3 --max-time 10 http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "✅ Deployment successful!"
            echo "📊 Service status:"
            sudo systemctl status cherrypick-app --no-pager -l
            echo ""
            echo "🏥 Health check result:"
            curl -s http://localhost:8080/actuator/health | jq . || echo "Health endpoint OK"
            break
          fi
          
          if [ $i -eq 30 ]; then
            echo "❌ Health check failed!"
            echo "🔄 Attempting automatic rollback..."
            
            # 자동 롤백
            sudo systemctl stop cherrypick-app
            LATEST_BACKUP=$(ls -t /opt/cherrypick/*.backup.* 2>/dev/null | head -1)
            if [ -n "$LATEST_BACKUP" ]; then
              echo "🔄 Rolling back to: $(basename $LATEST_BACKUP)"
              sudo cp "$LATEST_BACKUP" "/opt/cherrypick/${{ env.JAR_FILE }}"
              sudo systemctl start cherrypick-app
              sleep 15
              
              if curl -f --connect-timeout 3 http://localhost:8080/actuator/health >/dev/null 2>&1; then
                echo "✅ Rollback successful!"
                exit 2  # Exit with code 2 to indicate rollback occurred
              fi
            fi
            
            echo "❌ Rollback failed!"
            echo "📋 Service logs:"
            sudo journalctl -u cherrypick-app --no-pager -l -n 20
            exit 1
          fi
          
          echo "Waiting... ($i/30)"
          sleep 10
        done

    - name: Final verification
      run: |
        echo "🔍 Final deployment verification..."
        echo "📊 System status:"
        systemctl is-active cherrypick-app
        echo ""
        echo "🏥 Application health:"
        curl -s http://localhost:8080/actuator/health | jq . || echo "Health check passed"
        echo ""
        echo "🎉 Deployment completed successfully!"

    - name: Cleanup build artifacts
      if: always()
      run: |
        # 빌드 결과물 정리 (디스크 공간 절약)
        rm -rf build/ || true
        rm -rf .gradle/ || true
        echo "🧹 Build artifacts cleaned up"
