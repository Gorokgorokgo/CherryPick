name: Deploy to NCP Server

on:
  push:
    branches: [main, dev]
  workflow_dispatch:

env:
  JAR_NAME: CherryPick-0.0.1-SNAPSHOT.jar

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cherrypick_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: gradle-${{ runner.os }}-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create test environment
      run: |
        cat > .env.test << EOF
        SPRING_PROFILES_ACTIVE=test
        NCP_DB_HOST=localhost
        NCP_DB_PORT=5432
        NCP_DB_NAME=cherrypick_test
        NCP_DB_USERNAME=postgres
        NCP_DB_PASSWORD=test_password
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=
        JWT_SECRET=test-jwt-secret-key-must-be-at-least-64-characters-long-for-security
        JWT_EXPIRATION=86400000
        NCP_OBJECT_STORAGE_ENDPOINT=https://kr.object.ncloudstorage.com
        NCP_OBJECT_STORAGE_BUCKET=cherrypick-test
        NCP_ACCESS_KEY_ID=test
        NCP_SECRET_ACCESS_KEY=test
        NCP_REGION=kr-standard
        COMMISSION_RATE=0.03
        NEW_USER_FREE_DAYS=30
        PROMOTION_ENABLED=true
        PROMOTION_RATE=0.00
        PROMOTION_END_DATE=2025-12-31
        EOF

    - name: Run tests
      env:
        SPRING_PROFILES_ACTIVE: test
      run: |
        ./gradlew test --parallel --build-cache --no-daemon

    - name: Build application
      run: |
        ./gradlew bootJar --parallel --build-cache --no-daemon

    - name: Verify build
      run: |
        if [ ! -f "build/libs/${{ env.JAR_NAME }}" ]; then
          echo "❌ JAR file not found"
          exit 1
        fi
        echo "✅ Build completed: $(ls -lh build/libs/${{ env.JAR_NAME }})"

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/${{ env.JAR_NAME }}
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact

    - name: Setup SSH
      run: |
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        echo "${{ secrets.NCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy to server
      run: |
        # Upload JAR file
        sshpass -p "${{ secrets.NCP_SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no \
          ${{ env.JAR_NAME }} ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }}:/tmp/

        # Execute deployment
        sshpass -p "${{ secrets.NCP_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} << 'EOF'
        
        # Deployment script
        APP_NAME="cherrypick"
        JAR_FILE="${{ env.JAR_NAME }}"
        SERVICE_NAME="cherrypick-app"
        
        echo "🚀 Deploying $APP_NAME..."
        
        # Stop service
        sudo systemctl stop $SERVICE_NAME 2>/dev/null || true
        
        # Backup current version
        if [ -f "/opt/$APP_NAME/$JAR_FILE" ]; then
          sudo cp "/opt/$APP_NAME/$JAR_FILE" "/opt/$APP_NAME/$JAR_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Deploy new version
        sudo mkdir -p /opt/$APP_NAME
        sudo mv "/tmp/$JAR_FILE" "/opt/$APP_NAME/"
        sudo chown cherrypick:cherrypick "/opt/$APP_NAME/$JAR_FILE"
        sudo chmod 755 "/opt/$APP_NAME/$JAR_FILE"
        
        # Start service
        sudo systemctl start $SERVICE_NAME
        sudo systemctl enable $SERVICE_NAME
        
        # Wait for startup
        echo "⏳ Waiting for application startup..."
        sleep 15
        
        # Health check
        if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Health check failed - attempting rollback..."
          sudo systemctl stop $SERVICE_NAME
          BACKUP=$(ls -t /opt/$APP_NAME/$JAR_FILE.backup.* 2>/dev/null | head -1)
          if [ -n "$BACKUP" ]; then
            sudo cp "$BACKUP" "/opt/$APP_NAME/$JAR_FILE"
            sudo systemctl start $SERVICE_NAME
            echo "🔄 Rolled back to previous version"
          fi
          exit 1
        fi
        EOF

    - name: Verify deployment
      run: |
        # Final health check
        sshpass -p "${{ secrets.NCP_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }} \
          "curl -f http://localhost:8080/actuator/health"
        echo "🎉 Deployment verified successfully!"
